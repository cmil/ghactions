% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/syntax.R
\name{action}
\alias{action}
\alias{action2hcl}
\alias{action2docker}
\title{Create GitHub Actions syntax for \emph{one action}}
\usage{
action(IDENTIFIER, needs = NULL, uses, runs = NULL, args = NULL,
  env = NULL, secrets = NULL)

action2hcl(l)

action2docker(l)
}
\arguments{
\item{needs}{\code{[character()]}
giving the actions (by their \code{IDENTIFIER}s) that must complete successfully before this action will be invoked.
Defaults to \code{NULL} for no upstream dependencies.}

\item{uses}{\code{[character(1)]}
giving the Docker image that will run the action.}

\item{runs}{\code{[character()]}
giving the command to run in the docker image.
Overrides the \code{Dockerfile} \code{ENTRYPOINT}.
Defaults to \code{NULL} for the default \code{ENTRYPOINT} (recommended).}

\item{args}{\code{[character()]}
giving the arguments to pass to the action.
Arguments get appended to the last command in \code{ENTRYPOINT}.
Defaults to \code{NULL} for no arguments.}

\item{env}{\code{[list(character(1)]}
giving the environment variables to set in the action's runtime environment.
Defaults to \code{NULL} for no environment variables (in addition to the defaults set by GitHub Actions).}

\item{secrets}{\code{[character()]}
giving the \emph{names} of the secret variables to set in the runtime enviornment, which the action can access as an environment variable.
The \emph{values} of secrets must be set in your repository's "Settings" tab.
\strong{Do not store secrets in your repository.}
GitHub advises against using GitHub actions for production secrets during the public beta period.
Defaults to \code{NULL} for no secrets.}

\item{...}{Arguments passed on to \code{processx::run}
\describe{
  \item{error_on_status}{Whether to throw an error if the command returns
with a non-zero status, or it is interrupted. The error clases are
\code{system_command_status_error} and \code{system_command_timeout_error},
respectively, and both errors have class \code{system_command_error} as
well. See also "Error conditions" below.}
  \item{wd}{Working directory of the process. If \code{NULL}, the current
working directory is used.}
  \item{echo_cmd}{Whether to print the command to run to the screen.}
  \item{echo}{Whether to print the standard output and error
to the screen. Note that the order of the standard output and error
lines are not necessarily correct, as standard output is typically
buffered.}
  \item{spinner}{Whether to show a reassuring spinner while the process
is running.}
  \item{timeout}{Timeout for the process, in seconds, or as a \code{difftime}
object. If it is not finished before this, it will be killed.}
  \item{stdout_line_callback}{\code{NULL}, or a function to call for every
line of the standard output. See \code{stdout_callback} and also more
below.}
  \item{stdout_callback}{\code{NULL}, or a function to call for every chunk
of the standard output. A chunk can be as small as a single character.
At most one of \code{stdout_line_callback} and \code{stdout_callback} can be
non-\code{NULL}.}
  \item{stderr_line_callback}{\code{NULL}, or a function to call for every
line of the standard error. See \code{stderr_callback} and also more
below.}
  \item{stderr_callback}{\code{NULL}, or a function to call for every chunk
of the standard error. A chunk can be as small as a single character.
At most one of \code{stderr_line_callback} and \code{stderr_callback} can be
non-\code{NULL}.}
  \item{stderr_to_stdout}{Whether to redirect the standard error to the
standard output. Specifying \code{TRUE} here will keep both in the
standard output, correctly interleaved. However, it is not possible
to deduce where pieces of the output were coming from. If this is
\code{TRUE}, the standard error callbacks  (if any) are never called.}
  \item{env}{Environment of the child process, a named character vector.
IF \code{NULL}, the environment of the parent is inherited.}
  \item{windows_verbatim_args}{Whether to omit the escaping of the
command and the arguments on windows. Ignored on other platforms.}
  \item{windows_hide_window}{Whether to hide the window of the
application on windows. Ignored on other platforms.}
  \item{encoding}{The encoding to assume for \code{stdout} and
\code{stderr}. By default the encoding of the current locale is
used. Note that \code{processx} always reencodes the output of
both streams in UTF-8 currently.}
  \item{cleanup_tree}{Whether to clean up the child process tree after
the process has finished.}
}}
}
\value{
\code{[list()]} list of action attributes.
}
\description{
Create GitHub Actions syntax for \emph{one action}
}
\details{
For details on the syntax and arguments, see \href{https://developer.github.com/actions/creating-workflows/workflow-configuration-options/}{here}
}
\section{Functions}{
\itemize{
\item \code{action2hcl}: Convert action to HCL

\item \code{action2docker}: Construct corresponding \code{docker run} command for an action.
}}

\examples{
# many R projects will need this block to first build an image from a DOCKERFILE
l <- action(
  IDENTIFIER = "Add two numbers",
  uses = "rocker/r-ver:3.6.1",
  args = "Rscript -e '1+1'"
)
action2hcl(l = l)

}
\seealso{
Other syntax: \code{\link{ghactions_events}},
  \code{\link{make_blocks}}
}
\concept{syntax}
