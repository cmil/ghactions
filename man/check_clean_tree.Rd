% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prog_com.R
\name{check_clean_tree}
\alias{check_clean_tree}
\alias{assert_clean_tree}
\title{Check \code{git status} for a clean working tree}
\usage{
check_clean_tree(code, dir = getwd(), stash = FALSE)

assert_clean_tree(code, dir = getwd(), stash = FALSE,
  .var.name = checkmate::vname(code), add = NULL)
}
\arguments{
\item{code}{The code to execute.}

\item{dir}{The directory \emph{in} which to execute the code.
Defaults to \code{\link[=getwd]{getwd()}}.}

\item{stash}{\code{[logical(1)]}
Giving what happens when the working tree is \emph{already unclean} before \code{code} is evaluated.
If \code{TRUE}, all stages are \code{git stash push}ed before, and \code{git stash apply}ed after the run; might fail in unexpected ways.
If \code{FALSE} (recommended default), an error is thrown when the working tree is unclean ex-ante.}
}
\value{
\code{[character(1)]} The \code{git status} results or \code{TRUE} if no diffs.
}
\description{
Check whether some code will cause changes to \code{git status} in the working directory.
}
\details{
The contents of \code{dir} will be copied to a temporary directory, where a git repository will be initiated and the \code{code} will be executed.
There will never be any changes to \code{dir}.
If \code{dir} or its subdirectories contain a \code{.gitignore}, it will be respected.

This function is modelled \href{https://mllg.github.io/checkmate/articles/checkmate.html}{checkmate}.
}
\seealso{
Other prog_com: \code{\link{document}}
}
\concept{prog_com}
\keyword{internal}
